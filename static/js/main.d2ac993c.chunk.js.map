{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initPlayer","bind","assertThisInitialized","playVideo","shaka","polyfill","installAll","num","Player","isBrowserSupported","console","error","player","refs","video","addEventListener","onErrorEvent","mani","load","then","log","catch","onError","event","detail","code","_this2","react_default","a","createElement","type","onClick","e","ref","width","poster","logo","controls","autoPlay","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"8SAqIeA,cA3Gb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAKU,UAAYV,EAAKU,UAAUF,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAHLA,mFAOZW,IAAMC,SAASC,+CAKPC,GACJH,IAAMI,OAAOC,qBAEfb,KAAKI,WAAWO,GAGhBG,QAAQC,MAAM,6DAIPJ,GACT,IAAIK,EAAS,IAAIR,IAAMI,OAAOZ,KAAKiB,KAAKC,OAGxCF,EAAOG,iBAAiB,QAASnB,KAAKoB,cACtC,IAAIC,EAAO,GACC,IAARV,EACFU,EAjDJ,gEAkDqB,IAARV,EACTU,EAhDJ,0FAiDqB,IAARV,EACTU,EA/CJ,2FAgDqB,IAARV,EACTU,EAzCJ,+EA0CqB,IAARV,EACTU,EAhDJ,8EAiDqB,IAARV,EACTU,EA/CJ,yGAgDqB,IAARV,IACTU,EA5CJ,gFAiDEL,EACGM,KAAKD,GACLE,KAAK,WAEJT,QAAQU,IAAI,oCAEbC,MAAMzB,KAAK0B,8CAGHC,GAEX3B,KAAK0B,QAAQC,EAAMC,wCAGbb,GAEND,QAAQC,MAAM,aAAcA,EAAMc,KAAM,SAAUd,oFAQ3C,IAAAe,EAAA9B,KACP,OACE+B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAKvB,UAAU,KAAnD,eAGAwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAKvB,UAAU,KAAnD,eAGAwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAKvB,UAAU,KAAnD,eAGAwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAKvB,UAAU,KAAnD,eAGAwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAKvB,UAAU,KAAnD,eAGAwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAKvB,UAAU,KAAnD,eAGAwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIN,EAAKvB,UAAU,KAAnD,eAGAwB,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAOI,IAAI,QAAQC,MAAM,MAAMC,OAAQC,IAAMC,UAAQ,EAACC,UAAQ,YAtGpDC,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.d2ac993c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport shaka from \"shaka-player\";\n\nvar manifestUri =\n  \"//storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\";\n\nvar manifest2 =\n  \"http://dash.akamaized.net/dash264/TestCasesIOP33/adapatationSetSwitching/5/manifest.mpd\";\n\nvar manifest3 =\n  \"http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-manifest.mpd\";\n\nvar manifest5 =\n  \"http://dash.akamaized.net/dash264/TestCases/2c/qualcomm/1/MultiResMPEG2.mpd\";\n\nvar manifest6 =\n  \"https://bitmovin-a.akamaihd.net/content/MI201109210084_1/mpds/f08e80da-bf1d-4e3d-8899-f0f6155f6efa.mpd\";\nvar manifest4 =\n  \"http://rdmedia.bbc.co.uk/dash/ondemand/bbb/2/client_manifest-common_init.mpd\";\n\nvar manifest7 =\n  \"http://rdmedia.bbc.co.uk/dash/ondemand/testcard/1/client_manifest-events.mpd\"; //testing stream\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.initPlayer = this.initPlayer.bind(this);\n    this.playVideo = this.playVideo.bind(this);\n  }\n  componentDidMount() {\n    // Install built-in polyfills to patch browser incompatibilities.\n    shaka.polyfill.installAll();\n\n    // Check to see if the browser supports the basic APIs Shaka needs.\n  }\n\n  playVideo(num) {\n    if (shaka.Player.isBrowserSupported()) {\n      // Everything looks good!\n      this.initPlayer(num);\n    } else {\n      // This browser does not have the minimum set of APIs we need.\n      console.error(\"Browser not supported!\");\n    }\n  }\n\n  initPlayer(num) {\n    var player = new shaka.Player(this.refs.video);\n\n    // Listen for error events.\n    player.addEventListener(\"error\", this.onErrorEvent);\n    var mani = \"\";\n    if (num === 1) {\n      mani = manifestUri;\n    } else if (num === 2) {\n      mani = manifest2;\n    } else if (num === 3) {\n      mani = manifest3;\n    } else if (num === 4) {\n      mani = manifest4;\n    } else if (num === 5) {\n      mani = manifest5;\n    } else if (num === 6) {\n      mani = manifest6;\n    } else if (num === 7) {\n      mani = manifest7;\n    }\n\n    // Try to load a manifest.\n    // This is an asynchronous process.\n    player\n      .load(mani)\n      .then(function() {\n        // This runs if the asynchronous load is successful.\n        console.log(\"The video has now been loaded!\");\n      })\n      .catch(this.onError); // onError is executed if the asynchronous load fails.\n  }\n\n  onErrorEvent(event) {\n    // Extract the shaka.util.Error object from the event.\n    this.onError(event.detail);\n  }\n\n  onError(error) {\n    // Log the error.\n    console.error(\"Error code\", error.code, \"object\", error);\n  }\n\n  componentWillUnmount() {\n    // unmount stuff\n    // kill stream hogging...:)\n  }\n\n  render() {\n    return (\n      <div>\n        <button type=\"button\" onClick={e => this.playVideo(1)}>\n          Click Me! 1\n        </button>\n        <br />\n        <button type=\"button\" onClick={e => this.playVideo(2)}>\n          Click Me! 2\n        </button>\n        <br />\n        <button type=\"button\" onClick={e => this.playVideo(3)}>\n          Click Me! 3\n        </button>\n        <br />\n        <button type=\"button\" onClick={e => this.playVideo(4)}>\n          Click Me! 4\n        </button>\n        <br />\n        <button type=\"button\" onClick={e => this.playVideo(5)}>\n          Click Me! 5\n        </button>\n        <br />\n        <button type=\"button\" onClick={e => this.playVideo(6)}>\n          Click Me! 6\n        </button>\n        <br />\n        <button type=\"button\" onClick={e => this.playVideo(7)}>\n          Click Me! 7\n        </button>\n        <h2>Player</h2>\n        <video ref=\"video\" width=\"640\" poster={logo} controls autoPlay />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}